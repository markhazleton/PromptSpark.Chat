@using PromptSpark.Chat.WorkflowDomain
@model EditNodeViewModel

@{
    ViewData["Title"] = "Add New Node";
}

<div class="container mt-4">
    <h2>Add New Node</h2>

    <form asp-action="AddNode" method="post">
        <div class="card mb-4">
            <div class="card-header">
                <h3 class="mb-0">Node Information</h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    @Html.HiddenFor(m => m.FileName)
                    <label asp-for="Id" class="form-label">Node ID</label>
                    <input asp-for="Id" class="form-control" />
                    <small class="form-text opacity-75">The Node ID should be unique.</small>
                    <span asp-validation-for="Id" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Question" class="form-label">Question</label>
                    <input asp-for="Question" class="form-control" />
                    <span asp-validation-for="Question" class="text-danger"></span>
                </div>
                
                <div class="mb-3">
                    <label for="questionTypeDropdown" class="form-label">Question Type</label>
                    <select asp-for="QuestionType" asp-items="Html.GetEnumSelectList<QuestionType>()" class="form-select" id="questionTypeDropdown">
                        <option value="">Choose...</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h3 class="mb-0">Answers</h3>
            </div>
            <div class="card-body">
                <div id="answersContainer">
                    <!-- Initial empty answer item; no answers in a new node by default -->
                </div>

                <button type="button" class="btn btn-primary mb-3" onclick="addAnswer()">Add Answer</button>
            </div>
        </div>

        <div class="d-flex gap-2 mt-3">
            <button type="submit" class="btn btn-success">Save Node</button>
            <a asp-action="Details" asp-route-fileName="@Model.FileName" class="btn btn-secondary">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // JavaScript to dynamically add and remove answers
        function addAnswer() {
            const answersContainer = document.getElementById("answersContainer");
            const answerIndex = answersContainer.children.length;

            const answerHtml = `
                <div class="answer-item card mb-3" data-index="${answerIndex}">
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Response</label>
                            <input name="Answers[${answerIndex}].Response" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Next Node</label>
                            <input name="Answers[${answerIndex}].NextNode" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">System Prompt</label>
                            <input name="Answers[${answerIndex}].SystemPrompt" class="form-control" />
                        </div>
                        <button type="button" class="btn btn-danger" onclick="removeAnswer(this)">Remove Answer</button>
                    </div>
                </div>
            `;
            answersContainer.insertAdjacentHTML("beforeend", answerHtml);
        }

        function removeAnswer(button) {
            const answerItem = button.closest(".answer-item");
            answerItem.remove();

            // Update the name attributes for remaining answers to keep indices sequential
            const answersContainer = document.getElementById("answersContainer");
            Array.from(answersContainer.children).forEach((item, index) => {
                item.setAttribute("data-index", index);
                item.querySelector("input[name$='Response']").setAttribute("name", `Answers[${index}].Response`);
                item.querySelector("input[name$='NextNode']").setAttribute("name", `Answers[${index}].NextNode`);
                item.querySelector("input[name$='SystemPrompt']").setAttribute("name", `Answers[${index}].SystemPrompt`);
            });
        }
    </script>
}
