@using PromptSpark.Chat.WorkflowDomain
@model EditNodeViewModel

@{
    ViewData["Title"] = "Edit Node - " + Model.Id;
    var questionTypeOptions = Enum.GetValues(typeof(QuestionType))
                                  .Cast<QuestionType>()
                                  .Select(qt => new SelectListItem
                                          {
                                              Text = qt.ToString(),
                                              Value = ((int)qt).ToString(),
                                              Selected = Model.QuestionType == qt
                                          });
}

<div class="container mt-4">
    <h2>Edit Node - @Model.Id</h2>

    <form asp-action="EditNode" method="post">
        @Html.HiddenFor(m => m.Id)
        @Html.HiddenFor(m => m.FileName)
        <div class="mb-3">
            <label asp-for="Question" class="form-label">Question</label>
            <input asp-for="Question" class="form-control" />
            <span asp-validation-for="Question" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label for="questionTypeDropdown" class="form-label">Select Question Type</label>
            <select asp-for="QuestionType" asp-items="questionTypeOptions" class="form-select" id="questionTypeDropdown">
                <option value="">Choose...</option> <!-- Placeholder option -->
            </select>
        </div>
        
        <div class="card mb-4">
            <div class="card-header">
                <h3 class="mb-0">Answers</h3>
            </div>
            <div class="card-body">
                <div id="answersContainer">
                    @for (int i = 0; i < Model.Answers.Count; i++)
                    {
                        <div class="answer-item card mb-3" data-index="@i">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label">Response</label>
                                    <input name="Answers[@i].Response" value="@Model.Answers[i].Response" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Next Node</label>
                                    <input name="Answers[@i].NextNode" value="@Model.Answers[i].NextNode" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">System Prompt</label>
                                    <input name="Answers[@i].SystemPrompt" value="@Model.Answers[i].SystemPrompt" class="form-control" />
                                </div>

                                <button type="button" class="btn btn-danger" onclick="removeAnswer(this)">Remove Answer</button>
                            </div>
                        </div>
                    }
                </div>

                <button type="button" class="btn btn-primary mb-3" onclick="addAnswer()">Add Answer</button>
            </div>
        </div>

        <div class="d-flex gap-2 mt-3">
            <button type="submit" class="btn btn-success">Save Node</button>
            <a asp-action="Details" asp-route-fileName="@Model.FileName" class="btn btn-secondary">Cancel</a>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // JavaScript to dynamically add and remove answers
        function addAnswer() {
            const answersContainer = document.getElementById("answersContainer");
            const answerIndex = answersContainer.children.length;

            const answerHtml = `
                <div class="answer-item card mb-3" data-index="${answerIndex}">
                    <div class="card-body">
                        <div class="mb-3">
                            <label class="form-label">Response</label>
                            <input name="Answers[${answerIndex}].Response" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Next Node</label>
                            <input name="Answers[${answerIndex}].NextNode" class="form-control" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">System Prompt</label>
                            <input name="Answers[${answerIndex}].SystemPrompt" class="form-control" />
                        </div>
                        <button type="button" class="btn btn-danger" onclick="removeAnswer(this)">Remove Answer</button>
                    </div>
                </div>
            `;
            answersContainer.insertAdjacentHTML("beforeend", answerHtml);
        }

        function removeAnswer(button) {
            const answerItem = button.closest(".answer-item");
            answerItem.remove();

            // Update the name attributes for remaining answers to keep indices sequential
            const answersContainer = document.getElementById("answersContainer");
            Array.from(answersContainer.children).forEach((item, index) => {
                item.setAttribute("data-index", index);
                item.querySelector("input[name$='Response']").setAttribute("name", `Answers[${index}].Response`);
                item.querySelector("input[name$='NextNode']").setAttribute("name", `Answers[${index}].NextNode`);
                item.querySelector("input[name$='SystemPrompt']").setAttribute("name", `Answers[${index}].SystemPrompt`);
            });
        }
    </script>
}
